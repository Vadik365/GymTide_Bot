import os
import csv
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, InputFile
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.bot import Bot

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ .env
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
translations = {
    'ru': {
        'greeting': "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
        'choose_language': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        'thanks': "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É.",
        'questions': [
            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
            "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å?",
            "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º?",
            "–ö–∞–∫–∞—è —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª—å?",
            "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?"
        ]
    },
    'uk': {
        'greeting': "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Å–∫–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–µ–±–µ –ø—Ä–æ–≥—Ä–∞–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.",
        'choose_language': "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –º–æ–≤—É:",
        'thanks': "–î—è–∫—É—é! –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç—Ä–µ–Ω–µ—Ä—É.",
        'questions': [
            "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
            "–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?",
            "–Ø–∫–∞ –≤ —Ç–µ–±–µ –≤–∞–≥–∞?",
            "–ß–∏ –º–∞—î—à –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑–¥–æ—Ä–æ–≤‚Äô—è–º?",
            "–Ø–∫–∞ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞ —Ñ—ñ—Ç–Ω–µ—Å-–º–µ—Ç–∞?",
            "–Ø–∫ —á–∞—Å—Ç–æ –ø–ª–∞–Ω—É—î—à —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—è?"
        ]
    },
    'en': {
        'greeting': "Hi! I‚Äôll help you create a workout plan.",
        'choose_language': "Please choose a language:",
        'thanks': "Thanks! Your form has been sent to the coach.",
        'questions': [
            "What is your name?",
            "How old are you?",
            "What is your weight?",
            "Do you have any health problems?",
            "What is your main fitness goal?",
            "How often do you plan to work out?"
        ]
    }
}

# –ü–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∫–ª—é—á–∏ –¥–ª—è CSV
questions = [
    ("name", "name"),
    ("age", "age"),
    ("weight", "weight"),
    ("health", "health"),
    ("goal", "goal"),
    ("frequency", "frequency")
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
lang_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üá¨üáß English"), KeyboardButton(
            text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"), KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")]
    ],
    resize_keyboard=True
)

lang_map = {
    "üá¨üáß English": "en",
    "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk",
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM


class Form(StatesGroup):
    filling = State()

# –ö–æ–º–∞–Ω–¥–∞ /start


@dp.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id == ADMIN_ID:
        admin_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="/list")],
                      [KeyboardButton(text="/sendfile")]],
            resize_keyboard=True
        )
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!\n–¢–≤–æ–π Telegram ID: {user_id}", reply_markup=admin_keyboard)
        await state.clear()
    else:
        await message.answer(translations['ru']['choose_language'], reply_markup=lang_keyboard)
        await state.clear()

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏ –Ω–∞—á–∞–ª–æ –∞–Ω–∫–µ—Ç—ã


@dp.message()
async def process_language_or_answer(message: Message, state: FSMContext):
    lang = lang_map.get(message.text)
    current_state = await state.get_state()

    if lang:
        await state.update_data(lang=lang, current_question=0, answers={})
        await message.answer(translations[lang]['greeting'])
        await message.answer(translations[lang]['questions'][0])
        await state.set_state(Form.filling)
        return

    if current_state == Form.filling:
        await process_question(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∞–Ω–∫–µ—Ç—É


async def process_question(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    index = data.get("current_question", 0)
    answers = data.get("answers", {})

    key = questions[index][0]
    answers[key] = message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –∏ username
    answers["language"] = lang
    answers["username"] = message.from_user.username or "‚Äî"

    index += 1
    if index < len(questions):
        await state.update_data(current_question=index, answers=answers)
        await message.answer(translations[lang]['questions'][index])
    else:
        await message.answer(translations[lang]['thanks'])
        await send_to_admin(message.from_user.id, answers)
        save_to_csv(message.from_user.id, answers)
        await state.clear()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –∞–¥–º–∏–Ω—É


async def send_to_admin(user_id: int, data: dict):
    text = (
        "<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n\n"
        f"Telegram ID: <code>{user_id}</code>\n"
        f"Username: @{data.get('username')}\n"
        f"–Ø–∑—ã–∫: {data.get('language')}\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age')}\n"
        f"–í–µ—Å: {data.get('weight')}\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {data.get('health')}\n"
        f"–¶–µ–ª—å: {data.get('goal')}\n"
        f"–ß–∞—Å—Ç–æ—Ç–∞: {data.get('frequency')}"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode=ParseMode.HTML)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã


def save_to_csv(user_id: int, data: dict):
    file_exists = os.path.isfile("applications.csv")
    with open("applications.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(["user_id", "username", "language"] + [q[0]
                            for q in questions])
        writer.writerow([user_id, data.get("username", ""), data.get(
            "language", "")] + [data.get(q[0], "") for q in questions])

# –ö–æ–º–∞–Ω–¥–∞ /list


@dp.message(Command("list"))
async def cmd_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open("applications.csv", encoding="utf-8") as f:
            rows = f.readlines()
            await message.answer(f"–í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {len(rows)-1 if len(rows) > 1 else 0}")
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å –∞–Ω–∫–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>


@dp.message(Command("send"))
async def cmd_send(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    try:
        user_id = int(args[1])
        text = args[2]
        await bot.send_message(chat_id=user_id, text=text)
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /sendfile <user_id> <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>


@dp.message(Command("sendfile"))
async def cmd_sendfile(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç: /sendfile <user_id> <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É>")
        return
    try:
        user_id = int(args[1])
        path = args[2]
        if not os.path.exists(path):
            await message.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        await bot.send_document(chat_id=user_id, document=InputFile(path))
        await message.answer("üìé –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    dp.run_polling(bot)
