import logging
import csv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = "7345572170:AAEH7Cf6IZC4t48hWUkOfqL8Qh7SB9kFVZ4"  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
ADMIN_ID = 7678402237  # –¢–≤–æ–π ID

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –ü–µ—Ä–µ–≤–æ–¥—ã
translations = {
    'ru': {
        'greeting': "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
        'choose_language': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫:",
        'thanks': "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç—Ä–µ–Ω–µ—Ä—É.",
        'questions': [
            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
            "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≤–µ—Å?",
            "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º?",
            "–ö–∞–∫–∞—è —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª—å?",
            "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?"
        ]
    },
    'uk': {
        'greeting': "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Å–∫–ª–∞—Å—Ç–∏ –¥–ª—è —Ç–µ–±–µ –ø—Ä–æ–≥—Ä–∞–º—É —Ç—Ä–µ–Ω—É–≤–∞–Ω—å.",
        'choose_language': "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –º–æ–≤—É:",
        'thanks': "–î—è–∫—É—é! –¢–≤–æ—é –∞–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç—Ä–µ–Ω–µ—Ä—É.",
        'questions': [
            "–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?",
            "–°–∫—ñ–ª—å–∫–∏ —Ç–æ–±—ñ —Ä–æ–∫—ñ–≤?",
            "–Ø–∫–∞ –≤ —Ç–µ–±–µ –≤–∞–≥–∞?",
            "–ß–∏ –º–∞—î—à –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ –∑–¥–æ—Ä–æ–≤‚Äô—è–º?",
            "–Ø–∫–∞ —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞ —Ñ—ñ—Ç–Ω–µ—Å-–º–µ—Ç–∞?",
            "–Ø–∫ —á–∞—Å—Ç–æ –ø–ª–∞–Ω—É—î—à —Ç—Ä–µ–Ω—É–≤–∞—Ç–∏—Å—è?"
        ]
    },
    'en': {
        'greeting': "Hi! I‚Äôll help you create a workout plan.",
        'choose_language': "Please choose a language:",
        'thanks': "Thanks! Your form has been sent to the coach.",
        'questions': [
            "What is your name?",
            "How old are you?",
            "What is your weight?",
            "Do you have any health problems?",
            "What is your main fitness goal?",
            "How often do you plan to work out?"
        ]
    }
}

questions = [
    ("name", "name"),
    ("age", "age"),
    ("weight", "weight"),
    ("health", "health"),
    ("goal", "goal"),
    ("frequency", "frequency")
]

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    filling = State()

# –Ø–∑—ã–∫–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
lang_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üá¨üáß English"), KeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"), KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")]
    ],
    resize_keyboard=True
)

lang_map = {
    "üá¨üáß English": "en",
    "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": "uk",
    "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru",
}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id == ADMIN_ID:
        admin_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="/list")],
                [KeyboardButton(text="/send")]
            ],
            resize_keyboard=True
        )
        await message.answer(f"–¢–≤–æ–π Telegram ID: {user_id}\n–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω! –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /list –∏ /send.",
                             reply_markup=admin_keyboard)
        await state.clear()
    else:
        await message.answer("Please choose a language / –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –º–æ–≤—É/ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ :", reply_markup=lang_keyboard)
        await state.clear()

# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
@dp.message()
async def choose_language(message: Message, state: FSMContext):
    lang = lang_map.get(message.text)
    if lang:
        await state.update_data(lang=lang, current_question=0, answers={})
        await message.answer(translations[lang]['greeting'])
        await message.answer(translations[lang]['questions'][0])
        await state.set_state(Form.filling)
        return

    # –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∫–µ—Ç—ã
    current_state = await state.get_state()
    if current_state == Form.filling:
        await process_answer(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
async def process_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("lang", "ru")
    current_index = data.get("current_question", 0)
    answers = data.get("answers", {})

    key = questions[current_index][0]
    answers[key] = message.text

    if "language" not in answers:
        answers["language"] = lang

    current_index += 1
    if current_index < len(questions):
        await state.update_data(current_question=current_index, answers=answers)
        await message.answer(translations[lang]['questions'][current_index])
    else:
        await message.answer(translations[lang]['thanks'])
        await send_application_to_admin(message.from_user.id, answers)
        save_to_csv(message.from_user.id, answers)
        await state.clear()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –∞–¥–º–∏–Ω—É
async def send_application_to_admin(user_id, data):
    language = data.get('language', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    text = (
        f"<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞</b>\n\n"
        f"Telegram ID: {user_id}\n"
        f"–Ø–∑—ã–∫: {data.get('language', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–ò–º—è: {data.get('name', '')}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data.get('age', '')}\n"
        f"–í–µ—Å: {data.get('weight', '')}\n"
        f"–ó–¥–æ—Ä–æ–≤—å–µ: {data.get('health', '')}\n"
        f"–¶–µ–ª—å: {data.get('goal', '')}\n"
        f"–ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–Ω—è—Ç–∏–π: {data.get('frequency', '')}"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode=ParseMode.HTML)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
def save_to_csv(user_id, data):
    with open("applications.csv", "a", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile)
        row = [user_id, data.get("language", "")] + [data.get(q[0], "") for q in questions]
        writer.writerow(row)

# –ö–æ–º–∞–Ω–¥–∞ /list
@dp.message(Command("list"))
async def cmd_list(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open("applications.csv", "r", encoding="utf-8") as csvfile:
            rows = csvfile.readlines()
            if not rows:
                await message.answer("–ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç.")
                return
            text = f"–í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {len(rows)}"
            await message.answer(text)
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª —Å –∞–Ω–∫–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /send
@dp.message(Command("send"))
async def handle_send_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.text.split(maxsplit=2)

    if len(args) == 1:
        try:
            with open("applications.csv", "r", encoding="utf-8") as csvfile:
                rows = csv.reader(csvfile)
                text = ""
                for row in rows:
                    text += (
                        f"\n\nTelegram ID: {row[0]}"
                        f"\n–ò–º—è: {row[1]}"
                        f"\n–í–æ–∑—Ä–∞—Å—Ç: {row[2]}"
                        f"\n–í–µ—Å: {row[3]}"
                        f"\n–ó–¥–æ—Ä–æ–≤—å–µ: {row[4]}"
                        f"\n–¶–µ–ª—å: {row[5]}"
                        f"\n–ß–∞—Å—Ç–æ—Ç–∞ –∑–∞–Ω—è—Ç–∏–π: {row[6]}"
                        f"\n{'-'*20}"
                    )
                if text:
                    await message.answer(f"<b>–°–ø–∏—Å–æ–∫ –∞–Ω–∫–µ—Ç:</b>{text}", parse_mode=ParseMode.HTML)
                else:
                    await message.answer("–ê–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç.")
        except FileNotFoundError:
            await message.answer("–§–∞–π–ª —Å –∞–Ω–∫–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if len(args) >= 3:
        try:
            user_id = int(args[1])
            text_to_send = args[2]
            await bot.send_message(chat_id=user_id, text=text_to_send)
            await message.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        except ValueError:
            await message.answer("‚ùå user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        return

    await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    dp.run_polling(bot)
