import os
import csv
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InputFile, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from typing import List

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_ID", "").split(",")))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_FILE = "users.csv"

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
language_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üá¨üáß English"),
            KeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"),
            KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π"),
        ]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è username


def save_username(user: types.User):
    if not user.username:
        return
    if not os.path.exists(USER_FILE):
        with open(USER_FILE, "w", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["username"])
    with open(USER_FILE, "r") as f:
        usernames = [row[0] for row in csv.reader(f)]
    if user.username not in usernames:
        with open(USER_FILE, "a", newline="") as f:
            writer = csv.writer(f)
            writer.writerow([user.username])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start


@dp.message(CommandStart())
async def cmd_start(message: Message):
    save_username(message.from_user)
    await message.answer("üåê Please select your language:", reply_markup=language_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /send (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)


@dp.message(Command("send"))
async def send_message_to_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õîÔ∏è Access denied.")
    text = message.text.split(maxsplit=1)
    if len(text) < 2:
        return await message.answer("‚ö†Ô∏è Please provide message text: /send Your message here.")

    msg_text = text[1]
    sent = 0
    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r") as f:
            for row in csv.reader(f):
                username = row[0]
                if username == "username":
                    continue
                try:
                    await bot.send_message(chat_id=f"@{username}", text=msg_text)
                    sent += 1
                except Exception as e:
                    logging.warning(f"Failed to send to @{username}: {e}")
    await message.answer(f"‚úÖ Message sent to {sent} users.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /sendfile (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)


@dp.message(Command("sendfile"))
async def send_file_to_users(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õîÔ∏è Access denied.")
    file_path = "file_to_send.txt"
    if not os.path.exists(file_path):
        return await message.answer("‚ö†Ô∏è File not found.")

    sent = 0
    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r") as f:
            for row in csv.reader(f):
                username = row[0]
                if username == "username":
                    continue
                try:
                    await bot.send_document(chat_id=f"@{username}", document=InputFile(file_path))
                    sent += 1
                except Exception as e:
                    logging.warning(f"Failed to send file to @{username}: {e}")
    await message.answer(f"‚úÖ File sent to {sent} users.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    import asyncio

    async def main():
        await dp.start_polling(bot)
    asyncio.run(main())
